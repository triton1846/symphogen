@using BlazorWebAppSymphogen.Models.Validation

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(IsEditMode ? "Edit" : "Add New") Team</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="Team" Validation="_teamValidator.ValidateValue" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="Team.Name"
                                  For="@(() => Team.Name)"
                                  Immediate="true"
                                  Label="Team Name" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Clearable="true"
                               For="@(() => Team.ValidationSuperUsers)"
                               Immediate="true"
                               Label="Super Users"
                               MultiSelection="true"
                               SelectedValues="Team.SuperUsers"
                               SelectedValuesChanged="OnSuperUsersSelected"
                               T="Models.User"
                               ToStringFunc="@(user => user.FullName)">
                        @foreach (var user in _superUsers.OrderByDescending(u => Team.SuperUsers.Contains(u)).ThenBy(u => u.FullName))
                        {
                            <MudSelectItem Disabled="@(!user.UserExists && !Team.SuperUsers.Any(t => t.Id == user.Id))"
                                           T="Models.User"
                                           Value="@user">
                                @if (user.UserExists)
                                {
                                    @user.FullName
                                }
                                else
                                {
                                    <MudText Color="Color.Error">@user.FullName</MudText>
                                }
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Clearable="true"
                               For="@(() => Team.ValidationUsers)"
                               Immediate="true"
                               Label="Users"
                               MultiSelection="true"
                               SelectedValues="Team.Users"
                               SelectedValuesChanged="OnUsersSelected"
                               T="Models.User"
                               ToStringFunc="@(user => user.FullName)">
                        @foreach (var user in _users.OrderByDescending(u => Team.Users.Contains(u)).ThenBy(u => u.FullName))
                        {
                            <MudSelectItem Disabled="@(!user.UserExists && !Team.Users.Any(t => t.Id == user.Id))"
                                           T="Models.User"
                                           Value="@user">
                                @if (user.UserExists)
                                {
                                    @user.FullName
                                }
                                else
                                {
                                    <MudText Color="Color.Error">@user.FullName</MudText>
                                }
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Clearable="true"
                               Immediate="true"
                               Label="Workflow Configurations"
                               MultiSelection="true"
                               SelectedValues="Team.WorkflowConfigurationIds"
                               T="string">
                        @foreach (var id in Team.WorkflowConfigurationIds ?? [])
                        {
                            <MudSelectItem T="string">@id</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                @* <MudItem xs="12" md="6">
                    <MudSelect T="Models.WorkflowConfiguration"
                               Label="Workflow Configurations"
                               MultiSelection="true"
                               Immediate="true"
                               SelectedValues="Team.WorkflowConfigurationIds"
                               SelectedValuesChanged="OnWorkflowConfigurationsSelected"
                               ToStringFunc="@(config => config.Name)">
                        @foreach (var config in WorkflowConfigurations.OrderBy(c => c.Name))
                        {
                            <MudSelectItem T="Models.WorkflowConfiguration" Value="@config">@config.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem> *@
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (IsEditMode)
        {
            <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="() => MudDialog?.Close(DialogResult.Ok(true))">
                Delete
            </MudButton>
        }
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="SubmitTeam">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public List<Models.User> Users { get; set; } = [];

    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public Models.Team Team { get; set; } = new Models.Team
    {
        Id = Guid.NewGuid().ToString(),
        SuperUserIds = [],
        UserIds = [],
        WorkflowConfigurationIds = []
    };

    private MudForm? _form;
    private TeamValidator _teamValidator = new TeamValidator();
    private IEnumerable<Models.User> _users = [];
    private IEnumerable<Models.User> _superUsers = [];

    private void Cancel() => MudDialog?.Cancel();
    private void Submit() => MudDialog?.Close(DialogResult.Ok(Team));

    protected override void OnInitialized()
    {
        if (IsEditMode && Team == null)
        {
            throw new ArgumentNullException(nameof(Team), "Team cannot be null in edit mode.");
        }
        _users = Users.Where(u => (u.UserExists || Team.Users.Any(t => t.Id == u.Id)) && u.FullName?.Equals("Unknown Super User", StringComparison.OrdinalIgnoreCase) == false);
        _superUsers = Users.Where(u => u.UserExists || Team.SuperUsers.Any(t => t.Id == u.Id) && u.FullName?.Equals("Unknown User", StringComparison.OrdinalIgnoreCase) == false);

        // // Temp code to add random users and super users
        // var su = _superUsers.Where(u => u.UserExists).OrderBy(u => new Random().Next()).ToList();
        // var u1 = _users.Where(u => u.UserExists).OrderBy(u => new Random().Next()).ToList();
        // for (int i = 0; i < 3; i++)
        // {
        //     var superUserToAdd = su.ElementAt(i);
        //     Team.SuperUsers.Add(superUserToAdd);
        //     Team.SuperUserIds = Team.SuperUsers.Select(u => u.Id).ToList();

        //     var userToAdd = u1.ElementAt(i);
        //     Team.Users.Add(userToAdd);
        //     Team.UserIds = Team.Users.Select(u => u.Id).ToList();
        // }

        // Make sure duplicates are shown
        var duplicateSuperUsers = Team.SuperUsers.GroupBy(u => u.Id).Where(g => g.Count() > 1).SelectMany(g => g).ToList();
        foreach (var duplicateSuperUser in duplicateSuperUsers.Skip(1))
        {
            _superUsers = _superUsers.Append(duplicateSuperUser).ToList();
        }
        var duplicateUsers = Team.Users.GroupBy(u => u.Id).Where(g => g.Count() > 1).SelectMany(g => g).ToList();
        foreach (var duplicateUser in duplicateUsers.Skip(1))
        {
            _users = _users.Append(duplicateUser).ToList();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsEditMode && Team != null && _form != null)
        {
            await _form.Validate();
        }
    }

    private async Task SubmitTeam()
    {
        ArgumentNullException.ThrowIfNull(_form);

        await _form.Validate();
        if (!_form.IsValid)
        {
            return; // Form is invalid, do not submit
        }

        Submit();
    }

    private void OnSuperUsersSelected(IEnumerable<Models.User> selectedUsers)
    {
        Team.SuperUsers = selectedUsers.ToList();
        Team.SuperUserIds = Team.SuperUsers.Select(u => u.Id).ToList();
    }

    private void OnUsersSelected(IEnumerable<Models.User> selectedUsers)
    {
        Team.Users = selectedUsers.ToList();
        Team.UserIds = Team.Users.Select(u => u.Id).ToList();
    }
}
