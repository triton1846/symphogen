@inject IDialogService DialogService
@inject ILogger<TeamEditorDialog> Logger
@inject ISnackbar Snackbar
@inject IUserPreferences UserPreferences

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(IsEditMode ? "Edit" : "Add New") Team</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Model="_team" Validation="_teamValidator.ValidateValue" ValidationDelay="0">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField @bind-Value="_team.Name"
                                  For="@(() => _team.Name)"
                                  Immediate="true"
                                  Label="Team Name" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Clearable="true"
                               For="@(() => _team.ValidationSuperUsers)"
                               Immediate="true"
                               Label="Super Users"
                               MultiSelection="true"
                               SelectedValues="_team.SuperUsers"
                               SelectedValuesChanged="OnSuperUsersSelected"
                               T="Models.User"
                               ToStringFunc="@(user => user.FullName)">
                        @foreach (var user in _superUsers.Where(u => !_team.SuperUsers.Contains(u)).Concat(_team.SuperUsers).OrderByDescending(u => _team.SuperUsers.Contains(u)).ThenBy(u => u.FullName))
                        {
                            <MudSelectItem Disabled="@(!user.UserExists && !_team.SuperUsers.Any(t => t.Id == user.Id))"
                                           T="Models.User"
                                           Value="@user">
                                @if (user.UserExists)
                                {
                                    @user.FullName
                                }
                                else
                                {
                                    <MudText Color="Color.Error">@user.FullName</MudText>
                                }
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Clearable="true"
                               For="@(() => _team.ValidationUsers)"
                               Immediate="true"
                               Label="Users"
                               MultiSelection="true"
                               SelectedValues="_team.Users"
                               SelectedValuesChanged="OnUsersSelected"
                               T="Models.User"
                               ToStringFunc="@(user => user.FullName)">
                        @foreach (var user in _users.Where(u => !_team.Users.Contains(u)).Concat(_team.Users).OrderByDescending(u => _team.Users.Contains(u)).ThenBy(u => u.FullName))
                        {
                            <MudSelectItem Disabled="@(!user.UserExists && !_team.Users.Any(u => u.Id == user.Id))"
                                           T="Models.User"
                                           Value="@user">
                                @if (user.UserExists)
                                {
                                    @user.FullName
                                }
                                else
                                {
                                    <MudText Color="Color.Error">@user.FullName</MudText>
                                }
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Clearable="true"
                               For="@(() => _team.ValidationWorkflowConfigurations)"
                               Immediate="true"
                               Label="Workflow Configurations"
                               MultiSelection="true"
                               SelectedValues="_team.WorkflowConfigurations"
                               SelectedValuesChanged="OnWorkflowConfigurationsSelected"
                               T="Models.WorkflowConfiguration"
                               ToStringFunc="@(workflowConfiguration => workflowConfiguration.Name)">
                        @foreach (var workflowConfiguration in _workflowConfigurations.Where(w => !_team.WorkflowConfigurations.Contains(w)).Concat(_team.WorkflowConfigurations).OrderByDescending(w => _team.WorkflowConfigurations.Contains(w)).ThenBy(w => w.Name))
                        {
                            <MudSelectItem Disabled="@(!workflowConfiguration.WorkflowConfigurationExists && !_team.WorkflowConfigurations.Any(w => w.Id == workflowConfiguration.Id))"
                                           T="Models.WorkflowConfiguration"
                                           Value="@workflowConfiguration">
                                @if (workflowConfiguration.WorkflowConfigurationExists)
                                {
                                    @workflowConfiguration.Name
                                }
                                else
                                {
                                    <MudText Color="Color.Error">@workflowConfiguration.Name</MudText>
                                }
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        @if (IsEditMode)
        {
            <MudButton Color="Color.Error" Variant="Variant.Text" OnClick="Delete">
                Delete
            </MudButton>
        }
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="SubmitTeam">
            Save
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public List<Models.User> AllUsers { get; set; } = [];

    [Parameter]
    public List<Models.WorkflowConfiguration> AllWorkflowConfigurations { get; set; } = [];

    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public Models.Team? Team { get; set; }

    private MudForm? _form;
    private TeamValidator _teamValidator = new TeamValidator();
    private IEnumerable<Models.User> _users = [];
    private IEnumerable<Models.User> _superUsers = [];
    private IEnumerable<Models.WorkflowConfiguration> _workflowConfigurations = [];
    private Models.Team _team = new Models.Team
    {
        Id = Guid.NewGuid().ToString(),
        SuperUserIds = [],
        UserIds = [],
        WorkflowConfigurationIds = []
    };

    private void Cancel() => MudDialog?.Cancel();
    private void Submit() => MudDialog?.Close(DialogResult.Ok(_team));
    private async Task Delete()
    {
        var confirmResult = await DialogService.ShowMessageBox(
            "Confirm Deletion",
            "Are you sure you want to delete the team?",
            yesText: "Delete",
            noText: "Cancel");

        if (confirmResult == true)
        {
            MudDialog?.Close(DialogResult.Ok(true));
        }
    }

    protected override void OnInitialized()
    {
        if (IsEditMode && Team == null)
        {
            throw new ArgumentNullException(nameof(Team), "Team cannot be null in edit mode.");
        }
        else if (IsEditMode && Team != null)
        {
            _team = Team with { };
            _users = AllUsers.Where(u => u.UserExists).DistinctBy(w => w.Id);
            _superUsers = AllUsers.Where(u => u.UserExists).DistinctBy(w => w.Id);
            _workflowConfigurations = AllWorkflowConfigurations.Where(w => w.WorkflowConfigurationExists).DistinctBy(w => w.Id);
            RemoveInvalidData();
        }
        else
        {
            _users = AllUsers.Where(u => u.UserExists);
            _superUsers = AllUsers.Where(u => u.UserExists);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsEditMode && _team != null && _form != null)
        {
            await _form.Validate();
        }
    }

    private async Task SubmitTeam()
    {
        ArgumentNullException.ThrowIfNull(_form);

        await _form.Validate();
        if (!_form.IsValid)
        {
            return; // Form is invalid, do not submit
        }

        Submit();
    }

    private void OnSuperUsersSelected(IEnumerable<Models.User> selectedUsers)
    {
        _team.SuperUsers = selectedUsers.ToList();
    }

    private void OnUsersSelected(IEnumerable<Models.User> selectedUsers)
    {
        _team.Users = selectedUsers.ToList();
    }

    private void OnWorkflowConfigurationsSelected(IEnumerable<Models.WorkflowConfiguration> selectedWorkflowConfigurations)
    {
        _team.WorkflowConfigurations = selectedWorkflowConfigurations.ToList();
    }

    private void RemoveInvalidData()
    {
        if (UserPreferences.RemoveInvalidDataAutomatically)
        {
            // If team has unknown users, remove and inform user using snackbar - if UserPreferences.RemoveInvalidDataAutomatically is true
            var unknownUsers = _team.Users.Where(u => !u.UserExists).ToList();
            if (UserPreferences.RemoveInvalidDataAutomatically && unknownUsers.Any())
            {
                Logger.LogWarning("{Count} unknown user(s) have been removed", unknownUsers.Count);
                Snackbar.Add($"{unknownUsers.Count} unknown user(s) has been removed", Severity.Warning);
                _team.Users = _team.Users.Where(u => u.UserExists).ToList();
                _team.UserIds = _team.Users.Select(u => u.Id);
            }

            // If team has unknown super users, remove and inform user using snackbar - if UserPreferences.RemoveInvalidDataAutomatically is true
            var unknownSuperUsers = _team.SuperUsers.Where(u => !u.UserExists).ToList();
            if (UserPreferences.RemoveInvalidDataAutomatically && unknownSuperUsers.Any())
            {
                Logger.LogWarning("{Count} unknown super user(s) have been removed", unknownSuperUsers.Count);
                Snackbar.Add($"{unknownSuperUsers.Count} unknown super user(s) has been removed", Severity.Warning);
                _team.SuperUsers = _team.SuperUsers.Where(u => u.UserExists).ToList();
                _team.SuperUserIds = _team.SuperUsers.Select(u => u.Id);
            }

            // If team has unknown workflow configurations, remove and inform user using snackbar - if UserPreferences.RemoveInvalidDataAutomatically is true
            var unknownWorkflowConfigurations = _team.WorkflowConfigurations?.Where(w => !w.WorkflowConfigurationExists).ToList() ?? [];
            if (UserPreferences.RemoveInvalidDataAutomatically && unknownWorkflowConfigurations.Any())
            {
                Logger.LogWarning("{Count} unknown workflow configuration(s) have been removed", unknownWorkflowConfigurations.Count);
                Snackbar.Add($"{unknownWorkflowConfigurations.Count} unknown workflow configuration(s) has been removed", Severity.Warning);
                _team.WorkflowConfigurations = _team.WorkflowConfigurations?.Where(w => w.WorkflowConfigurationExists).ToList() ?? [];
                _team.WorkflowConfigurationIds = _team.WorkflowConfigurations?.Select(w => w.Id).ToList() ?? [];
            }

            // If team has duplicate users, remove duplicates and inform user using snackbar
            var duplicateUsers = _team.Users.GroupBy(u => u.Id).Where(g => g.Count() > 1).SelectMany(g => g).ToList();
            if (UserPreferences.RemoveInvalidDataAutomatically && duplicateUsers.Any())
            {
                Logger.LogWarning("{Count} duplicate user(s) have been removed", duplicateUsers.Count);
                Snackbar.Add($"{duplicateUsers.Count} duplicate user(s) have been removed", Severity.Warning);
                _team.Users = _team.Users.DistinctBy(u => u.Id).ToList();
                _team.UserIds = _team.Users.Select(u => u.Id);
            }

            // If team has duplicate super users, remove duplicates and inform user using snackbar
            var duplicateSuperUsers = _team.SuperUsers.GroupBy(u => u.Id).Where(g => g.Count() > 1).SelectMany(g => g).ToList();
            if (UserPreferences.RemoveInvalidDataAutomatically && duplicateSuperUsers.Any())
            {
                Logger.LogWarning("{Count} duplicate super user(s) have been removed", duplicateSuperUsers.Count);
                Snackbar.Add($"{duplicateSuperUsers.Count} duplicate super user(s) have been removed", Severity.Warning);
                _team.SuperUsers = _team.SuperUsers.DistinctBy(u => u.Id).ToList();
                _team.SuperUserIds = _team.SuperUsers.Select(u => u.Id);
            }

            // If team has duplicate workflow configurations, remove duplicates and inform user using snackbar
            var duplicateWorkflowConfigurations = _team.WorkflowConfigurations?.GroupBy(w => w.Id).Where(g => g.Count() > 1).SelectMany(g => g).ToList() ?? [];
            if (UserPreferences.RemoveInvalidDataAutomatically && duplicateWorkflowConfigurations.Any())
            {
                Logger.LogWarning("{Count} duplicate workflow configuration(s) have been removed", duplicateWorkflowConfigurations.Count);
                Snackbar.Add($"{duplicateWorkflowConfigurations.Count} duplicate workflow configuration(s) have been removed", Severity.Warning);
                _team.WorkflowConfigurations = _team.WorkflowConfigurations?.DistinctBy(w => w.Id).ToList() ?? [];
                _team.WorkflowConfigurationIds = _team.WorkflowConfigurations.Select(w => w.Id);
            }
        }
    }
}