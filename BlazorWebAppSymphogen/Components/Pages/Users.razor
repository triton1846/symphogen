@page "/users"
@rendermode InteractiveServer
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUserPreferences UserPreferences
@inject IUserService UserService
@inject ITeamService TeamService
@inject Microsoft.Extensions.Logging.ILogger<Users> Logger
@attribute [Authorize]

@if (!UserPreferences.IsInitialized || _isLoading)
{
    <MudOverlay Visible="true" DarkBackground>
        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
    </MudOverlay>
}
else
{
    <MudText Typo="Typo.h3">Users</MudText>
    <MudTable @bind-SelectedItem="_selectedItem"
              AllowUnsorted="false"
              Dense="true"
              Filter="new Func<Models.User, bool>(FilterFunc)"
              Hover="true"
              Items="_allUsers"
              Loading="_isLoading"
              OnRowClick="async model => await OpenUserEditorDialogAsync(model)"
              ReadOnly="_isLoading"
              SortLabel="Sort By"
              T="Models.User">
        <ToolBarContent>
            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="false">
                <MudTooltip Text="Add new user">
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                   aria-label="add-user"
                                   Color="Color.Success"
                                   OnClick="async _ => await OpenUserEditorDialogAsync()" />
                </MudTooltip>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="false">
                <MudSpacer />
            </MudHidden>
            <MudTextField @bind-Value="_searchString"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-0"
                          Clearable="true"
                          IconSize="Size.Medium"
                          Immediate="true"
                          Placeholder="Search" />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.User, object>(x => x.FullName ?? string.Empty)">Full Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.Email ?? string.Empty)">Email</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.Department ?? string.Empty)">Department</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.Location ?? string.Empty)">Location</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="SortByTeams">Teams</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">
                <IdCopyButton Id="@context.Id" TooltipText="@context.Id" />
            </MudTd>
            <MudTd DataLabel="Full Name">@context.FullName</MudTd>
            <MudTd DataLabel="Email">@context.Email</MudTd>
            <MudTd DataLabel="Department">@context.Department</MudTd>
            <MudTd DataLabel="Location">@context.Location</MudTd>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="false">
                <MudTd DataLabel="Teams">
                    @if (context.Teams.Any())
                    {
                        @foreach (var team in context.Teams.OrderBy(t => t.Name))
                        {
                            @if (team.TeamExists && context.Teams.Count(t => t.Id == team.Id) == 1)
                            {
                                <MudTooltip Text="@team.Id">
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small">@team.Name</MudChip>
                                </MudTooltip>
                            }
                            else if (team.TeamExists && context.Teams.Count(t => t.Id == team.Id) > 1)
                            {
                                <MudTooltip Text="@($"Team '{team.Name}' is listed more than once!")">
                                    <MudChip T="string" Color="Color.Error" Size="Size.Small">
                                        <MudText Style="font-weight: bold; text-transform: uppercase;">@team.Name</MudText>
                                    </MudChip>
                                </MudTooltip>
                            }
                            else
                            {
                                <MudTooltip Text="@($"Team with id {context.Id} doesn't exists!")">
                                    <MudChip T="string" Color="Color.Error" Size="Size.Small">@team.Name</MudChip>
                                </MudTooltip>
                            }
                        }
                    }
                    else
                    {
                        <MudTooltip Text="@($"{context.FullName} is not a member of any team")">
                            <MudChip T="string" Color="Color.Warning" Size="Size.Small">No Teams</MudChip>
                        </MudTooltip>
                    }
                </MudTd>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="false">
                <MudTd DataLabel="Teams">
                    <MudChip T="string" Size="Size.Small">@((context.Teams.Count())) team membership(s)</MudChip>
                </MudTd>
            </MudHidden>
        </RowTemplate>
        <FooterContent>
            <MudTFootRow>
                <MudTd>
                    <MudTooltip Text="Add new user">
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       aria-label="add-user"
                                       Color="Color.Success"
                                       OnClick="async _ => await OpenUserEditorDialogAsync()" />
                    </MudTooltip>
                </MudTd>
            </MudTFootRow>
        </FooterContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>
}

@code {
    private List<BlazorWebAppSymphogen.Models.User>? _allUsers;
    private string _searchString = string.Empty;
    private Models.User _selectedItem = default!;
    private List<string> _editEvents = new();
    private bool _isLoading = false;
    private List<Models.Team> _allTeams = [];
    private List<Models.Team> _selectedTeams = [];

    // TODO: Query arg for user id to edit

    protected override async Task OnInitializedAsync()
    {
        if (!UserPreferences.IsInitialized)
        {
            return;
        }

        _isLoading = true;
        await LoadTeamsAsync();
        await LoadUsersAsync();
        _isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!UserPreferences.IsInitialized)
        {
            _isLoading = true;
            await UserPreferences.InitializeAsync();
            await LoadTeamsAsync();
            await LoadUsersAsync();
            _isLoading = false;
            StateHasChanged(); // Refresh the UI after initialization
        }
    }

    private async Task LoadUsersAsync()
    {
        Logger.LogInformation("Loading users for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allUsers = [.. await UserService.GetAsync(UserPreferences.MimerEnvironment)];
        foreach (var user in _allUsers)
        {
            user.Teams.Clear();
            foreach (var teamId in user.TeamIds ?? [])
            {
                var team = _allTeams.FirstOrDefault(t => t.Id == teamId);
                var unknownTeam = new Models.Team { Id = teamId, Name = "Unknown Team", TeamExists = false };
                user.Teams.Add(team ?? unknownTeam);
                if (!_allTeams.Any(t => t.Id == teamId))
                {
                    _allTeams.Add(unknownTeam);
                }
            }
        }
    }

    private async Task LoadTeamsAsync()
    {
        Logger.LogInformation("Loading teams for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allTeams = [.. await TeamService.GetAsync(UserPreferences.MimerEnvironment)];
    }

    private bool FilterFunc(Models.User user)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (user.Department?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (user.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (user.FullName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (user.Location?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (user.Id?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        return false;
    }

    Func<Models.User, object>? SortByTeams = (Models.User x) => string.Join(", ", ((Models.User)(object)x).Teams.Select(t => t.Name).Order()); // For sorting teams in the table

    private async Task OpenUserEditorDialogAsync(MudBlazor.TableRowClickEventArgs<Models.User>? args = null)
    {
        User? userToEdit = args?.Item;
        var isEditMode = userToEdit != null;
        var parameters = new DialogParameters<UserEditorDialog>
        {
            { x => x.AllTeams, _allTeams },
            { x => x.IsEditMode, isEditMode }
        };
        if (isEditMode)
        {
            parameters.Add(x => x.User, userToEdit);
        }

        var userBefore = isEditMode ? _allUsers?.Single(u => u.Id == userToEdit?.Id).Clone() : null;
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<UserEditorDialog>(null, parameters, options);
        var result = await dialog.Result;

        if (result?.Canceled == false && _allUsers != null)
        {
            if (result.Data != null && result.Data is Models.User user)
            {
                if (isEditMode)
                {
                    // Update existing user
                    var index = _allUsers.FindIndex(u => u.Id == user.Id);
                    if (index >= 0)
                    {
                        _allUsers[index] = user;
                        _allUsers = _allUsers.OrderBy(u => u.FullName ?? string.Empty).ToList();
                        Snackbar.Add($"User {user.FullName} updated successfully!", Severity.Success);
                        Logger.LogInformation("Updated user: {UserName} ({UserId})", user.FullName, user.Id);
                    }
                    else
                    {
                        Snackbar.Add($"User {user.FullName} not found!", Severity.Error);
                        Logger.LogWarning("User {UserName} ({UserId}) not found for update", user.FullName, user.Id);
                    }
                }
                else
                {
                    // Add new user
                    _allUsers.Add(user);
                    _allUsers = _allUsers.OrderBy(u => u.FullName ?? string.Empty).ToList();
                    Snackbar.Add($"User {user.FullName} added successfully!", Severity.Success);
                    Logger.LogInformation("Added new user: {UserName} ({UserId})", user.FullName, user.Id);
                }
                // Save changes to Cosmos DB
                await UserService.SaveAsync(UserPreferences.MimerEnvironment, user);
            }
            else if (result.Data != null && result.Data is bool deleteUser && deleteUser && isEditMode)
            {
                // Handle user deletion
                var index = _allUsers.FindIndex(u => u.Id == args!.Item?.Id);
                if (index >= 0)
                {
                    var deletedUser = _allUsers[index];
                    _allUsers.RemoveAt(index);
                    await UserService.DeleteAsync(UserPreferences.MimerEnvironment, deletedUser.Id);
                    Snackbar.Add($"User {deletedUser.FullName} deleted successfully!", Severity.Success);
                    Logger.LogInformation("Deleted user: {UserName} ({UserId})", deletedUser.FullName, deletedUser.Id);
                }
                else
                {
                    Snackbar.Add($"User {args!.Item?.FullName} not found for deletion!", Severity.Error);
                    Logger.LogWarning("User {UserName} ({UserId}) not found for deletion", args.Item?.FullName, args.Item?.Id);
                }
            }
        }
        else
        {
            var index = _allUsers!.FindIndex(u => u.Id == args?.Item?.Id);
            if (index >= 0 && userBefore != null)
            {
                // Reset to original values if dialog was canceled
                var originalUser = (User)userBefore;
                _allUsers[index] = originalUser;
                Snackbar.Add($"Changes to user {originalUser.FullName} were canceled.", Severity.Info);
                Logger.LogInformation("Changes to user {UserName} ({UserId}) were canceled", originalUser.FullName, originalUser.Id);
            }
        }
    }
}
