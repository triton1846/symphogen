<MudCard Outlined="true">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">@Title</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudIconButton Icon="@Icon"
                           Disabled="@Disabled"
                           OnClick="OnButtonClicked"
                           Color="@(CurrentValue > TimeSpan.Zero ? Color.Warning : Color.Success)" />
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText>@Description</MudText>
        <MudText Typo="Typo.body2">
            @if (!string.IsNullOrWhiteSpace(BodyText))
            {
                <MudText Typo="Typo.body2">
                    @BodyText
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.body2">
                    This is useful for testing loading states.
                </MudText>
            }
        </MudText>
    </MudCardContent>
    <MudCardActions Class="mx-3">
        <MudSlider Value="@((int)CurrentValue.TotalMilliseconds)"
                   ValueChanged="OnValueChanged"
                   Disabled="@Disabled"
                   Min="@Min"
                   Max="@Max"
                   Step="@Step"
                   T="int"
                   ValueLabel="true"
                   Color="Color.Primary">
            @FormattedValue
        </MudSlider>
    </MudCardActions>
</MudCard>

@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public EventCallback<MouseEventArgs> OnButtonClick { get; set; }
    [Parameter] public EventCallback<TimeSpan> CurrentValueChanged { get; set; }
    /// <summary>
    /// The minimum allowed value.
    /// </summary>
    /// <remarks>
    /// Defauls to <c>0</c>.  Must be less than <see cref="Max"/>.
    /// </remarks>
    [Parameter] public int Min { get; set; } = 0;

    /// <summary>
    /// The maximum allowed value.
    /// </summary>
    /// <remarks>
    /// Defaults to <c>10000</c>. Must be greater than <see cref="Min"/>.
    /// </remarks>
    [Parameter] public int Max { get; set; } = 10000;
    [Parameter] public int Step { get; set; } = 100;
    [Parameter] public string Description { get; set; } = "";
    [Parameter] public string FormattedValue { get; set; } = "";
    [Parameter] public string Icon { get; set; } = Icons.Material.Filled.NetworkCheck;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string? BodyText { get; set; }
    [Parameter] public TimeSpan CurrentValue { get; set; }

    private TimeSpan _defaultTimeSpan = TimeSpan.FromMilliseconds(2000);

    private async Task OnValueChanged(int value)
    {
        await CurrentValueChanged.InvokeAsync(TimeSpan.FromMilliseconds(value));
    }

    private async Task OnButtonClicked(MouseEventArgs e)
    {
        if (OnButtonClick.HasDelegate)
        {
            await OnButtonClick.InvokeAsync(e);
        }
        else
        {
            // Default behavior - toggle between zero and default
            await CurrentValueChanged.InvokeAsync(CurrentValue > TimeSpan.Zero ? TimeSpan.Zero : _defaultTimeSpan);
        }
    }
}
