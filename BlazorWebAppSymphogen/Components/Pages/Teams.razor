@page "/teams"
@rendermode InteractiveServer
@using System.Text.Json
@using BlazorWebAppSymphogen.Components.Dialogs
@using Microsoft.Identity.Web
@using Microsoft.Identity.Abstractions
@inject Microsoft.Extensions.Logging.ILogger<Users> Logger
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDownstreamApi downstreamApi
@inject BlazorWebAppSymphogen.Services.ICosmosService CosmosService
@inject IUserPreferences UserPreferences
@inject IDialogService DialogService
@attribute [Authorize]

<PageTitle>Teams</PageTitle>

@if (!isInitialized)
{
    <MudOverlay @bind-Visible="isLoading" DarkBackground>
        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
    </MudOverlay>
}
else
{
    <MudCard Class="mt-4">
        <MudCardHeader>
            <MudText Typo="Typo.h3">Teams</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTable Dense="true"
                      Filter="new Func<Models.Team, bool>(FilterFunc)"
                      Hover="true"
                      Items="@allTeams"
                      Loading="isLoading"
                      ReadOnly="isLoading"
                      T="Models.Team"
                      OnRowClick="async model => await OpenTeamEditorDialogAsync(model)"
                      SortLabel="Sort By">
                <ToolBarContent>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="mt-0"
                                  Clearable="true"
                                  IconSize="Size.Medium"
                                  Immediate="true"
                                  Placeholder="Search"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<Models.Team, object>(x => x.Id)">ID</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.Team, object>(x => x.Name ?? string.Empty)">Team Name</MudTableSortLabel></MudTh>
                    <MudTh>Users</MudTh>
                    <MudTh>Super Users</MudTh>
                    @* <MudTh><MudTableSortLabel>Workflow Configurations</MudTableSortLabel></MudTh> *@
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID">
                        <MudTooltip Text="@context.Id">
                            <MudIconButton Icon="@(copiedIconIds.Contains(context.Id) ? Icons.Material.TwoTone.ContentCopy : Icons.Material.Filled.ContentCopy)"
                                           Color="Color.Success"
                                           OnClick="async () => await CopyId(context.Id)" />
                        </MudTooltip>
                    </MudTd>
                    <MudTd DataLabel="Team Name">@context.Name</MudTd>
                    <MudTd DataLabel="Users">
                        @if (context.UserIds != null && context.UserIds.Any())
                        {
                            var usersInTeam = allUsers.Where(u => context.UserIds.Contains(u.Id)).OrderBy(u => u.FullName).ToList();
                            var usersToDisplay = usersInTeam.Take(maxUserDisplayCount).ToList();
                            @foreach (var userToDisplay in usersToDisplay)
                            {
                                <MudText Class="mt-1">@userToDisplay.FullName</MudText>
                            }
                            @if (context.UserIds.Count() > maxUserDisplayCount)
                            {
                                <MudChip T="string" Size="Size.Small">+@((context.UserIds.Count() - maxUserDisplayCount).ToString()) more</MudChip>
                            }
                            @if (context.Users.Any(u => !u.UserExists))
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Unknown Users</MudText>
                            }
                            @if (context.UserIds.GroupBy(u => u).Where(g => g.Count() > 1).Any())
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Duplicates</MudText>
                            }
                        }
                        else
                        {
                            <MudText>No users assigned</MudText>
                        }
                    </MudTd>
                    <MudTd DataLabel="Super Users">
                        @if (context.SuperUserIds != null && context.SuperUserIds.Any())
                        {
                            var superUsersToDisplay = allUsers.Where(u => context.SuperUserIds.Contains(u.Id)).OrderBy(u => u.FullName).Take(maxUserDisplayCount).ToList();
                            @foreach (var superUserToDisplay in superUsersToDisplay)
                            {
                                <MudText Class="mt-1">@superUserToDisplay.FullName</MudText>
                            }
                            @if (context.SuperUserIds.Count() > maxUserDisplayCount)
                            {
                                <MudChip T="string" Size="Size.Small">+@((context.SuperUserIds.Count() - maxUserDisplayCount).ToString()) more</MudChip>
                            }
                            @if (context.SuperUsers.Any(u => !u.UserExists))
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Unknown Super Users</MudText>
                            }
                            @if (context.SuperUserIds.GroupBy(u => u).Where(g => g.Count() > 1).Any())
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Duplicates</MudText>
                            }
                        }
                        else
                        {
                            <MudText>No super users assigned</MudText>
                        }
                    </MudTd>
                </RowTemplate>
                <FooterContent>
                    <MudTd>
                        <MudTooltip Text="Add new team">
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           aria-label="add-team"
                                           Color="Color.Success"
                                           OnClick="async _ => await OpenTeamEditorDialogAsync(null)" />
                        </MudTooltip>
                    </MudTd>
                </FooterContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
                <EditButtonContent Context="button">
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
                </EditButtonContent>
            </MudTable>
        </MudCardContent>
    </MudCard>
}

@code {
    private bool isInitialized = false;
    private bool isLoading = true;
    private List<BlazorWebAppSymphogen.Models.User> allUsers = [];
    private List<Models.Team> allTeams = [];
    private string searchString = string.Empty;
    private HashSet<string?> copiedIconIds = new();
    private System.Timers.Timer? iconTimer;
    private int maxUserDisplayCount = 5;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadUsersAsync();
        await LoadTeamsAsync();
        isLoading = false;

        iconTimer = new System.Timers.Timer(1000);
        iconTimer.Elapsed += ResetIcon;
        iconTimer.AutoReset = false;

        isInitialized = true;
    }

    private async Task LoadUsersAsync()
    {
        Logger.LogInformation("Loading users for environment: {Environment}", UserPreferences.MimerEnvironment);
        allUsers = await CosmosService.GetUsersAsync(UserPreferences.MimerEnvironment);
    }

    private async Task LoadTeamsAsync()
    {
        Logger.LogInformation("Loading teams for environment: {Environment}", UserPreferences.MimerEnvironment);
        allTeams = await CosmosService.GetTeamsAsync(UserPreferences.MimerEnvironment);

        foreach (var team in allTeams)
        {
            team.Users.Clear();
            team.Users.AddRange(allUsers.Where(u => team.UserIds.Contains(u.Id)).ToList());
            // Handle unknown users
            foreach (var userId in team.UserIds)
            {
                if (team.UserIds.Any(u => u == userId) && !team.Users.Any(u => u.Id == userId))
                {
                    team.Users.Add(new Models.User
                    {
                        Id = userId,
                        FullName = "Unknown User",
                        UserExists = false
                    });
                }
            }

            team.SuperUsers.Clear();
            team.SuperUsers.AddRange(allUsers.Where(u => team.SuperUserIds.Contains(u.Id)).ToList());
            // Handle unknown super users
            foreach (var superUserId in team.SuperUserIds)
            {
                if (team.SuperUserIds.Any(u => u == superUserId) && !team.SuperUsers.Any(u => u.Id == superUserId))
                {
                    team.SuperUsers.Add(new Models.User
                    {
                        Id = superUserId,
                        FullName = "Unknown Super User",
                        UserExists = false
                    });
                }
            }
        }
    }

    private async Task CopyId(string? id)
    {
        if (!string.IsNullOrEmpty(id))
        {
            // Copy the ID to clipboard
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", id);

            // Change icon to check mark
            copiedIconIds.Clear();
            copiedIconIds.Add(id);

            // Start timer to revert icon
            iconTimer?.Stop();
            iconTimer?.Start();
        }
    }

    private void ResetIcon(object? sender, System.Timers.ElapsedEventArgs e)
    {
        // Clear all copied icons
        copiedIconIds.Clear();

        // Trigger UI update
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        iconTimer?.Dispose();
    }

    private bool FilterFunc(Models.Team team)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (team.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (team.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (team.UserIds.Any(i => i.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        // TODO: Search for users using their names or emails
        if (team.SuperUserIds.Any(i => i.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        // TODO: Search for super users using their names or emails

        return false;
    }

    private async Task OpenTeamEditorDialogAsync(MudBlazor.TableRowClickEventArgs<Models.Team>? args)
    {
        var users = allUsers;
        if (args?.Item?.Users.Any(u => u.UserExists == false) == true)
        {
            // If the team has unknown users, add them to the list to make it possible to unselect them
            users = allUsers.Concat(args.Item.Users.Where(u => !u.UserExists)).ToList();
        }
        if (args?.Item?.SuperUsers.Any(u => u.UserExists == false) == true)
        {
            // If the team has unknown super users, add them to the list to make it possible to unselect them
            users = users.Concat(args.Item.SuperUsers.Where(u => !u.UserExists)).ToList();
        }

        var parameters = new DialogParameters<TeamEditorDialog>
        {
            { x => x.Users, users }
        };

        var isEditMode = args != null;
        if (isEditMode)
        {
            parameters.Add(x => x.IsEditMode, true);
            parameters.Add(x => x.Team, args!.Item);
        }

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<TeamEditorDialog>(null, parameters, options);
        var result = await dialog.Result;
    }
}