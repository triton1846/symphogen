@page "/teams"
@rendermode InteractiveServer
@using System.Text.Json
@using Microsoft.Identity.Abstractions
@using Microsoft.Identity.Web
@inject IDialogService DialogService
@inject IDownstreamApi downstreamApi
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject IUserPreferences UserPreferences
@inject IUserService UserService
@inject ITeamService TeamService
@inject IWorkflowConfigurationService WorkflowConfigurationService
@inject Microsoft.Extensions.Logging.ILogger<Users> Logger
@attribute [Authorize]

<PageTitle>Teams</PageTitle>

@if (!_isInitialized)
{
    <MudOverlay @bind-Visible="_isLoading" DarkBackground>
        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
    </MudOverlay>
}
else
{
    <MudText Typo="Typo.h3">Teams</MudText>
    <MudTable AllowUnsorted="false"
              Dense="true"
              Filter="new Func<Models.Team, bool>(FilterFunc)"
              Hover="true"
              Items="_allTeams"
              Loading="_isLoading"
              ReadOnly="_isLoading"
              T="Team"
              OnRowClick="async model => await OpenTeamEditorDialogAsync(model)"
              SortLabel="Sort By">
        <ToolBarContent>
            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="false">
                <MudTooltip Text="Add new user">
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                   aria-label="add-team"
                                   Color="Color.Success"
                                   OnClick="async _ => await OpenTeamEditorDialogAsync()" />
                </MudTooltip>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="false">
                <MudSpacer />
            </MudHidden>
            <MudTextField @bind-Value="_searchString"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-0"
                          Clearable="true"
                          IconSize="Size.Medium"
                          Immediate="true"
                          Placeholder="Search"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.Team, object>(x => x.Id)">ID</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.Team, object>(x => x.Name ?? string.Empty)">Team Name</MudTableSortLabel></MudTh>
            <MudTh>Users</MudTh>
            <MudTh>Super Users</MudTh>
            <MudTh>Workflow Configurations</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="ID">
                <IdCopyButton Id="@context.Id" TooltipText="@context.Id" />
            </MudTd>
            <MudTd DataLabel="Team Name">@context.Name</MudTd>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="false">
                <MudTd DataLabel="Users">
                    <MudStack Spacing="0" StretchItems="StretchItems.None">
                        @if (context.UserIds != null && context.UserIds.Any())
                        {
                            var usersInTeam = _allUsers.Where(u => context.UserIds.Contains(u.Id)).OrderBy(u => u.FullName).ToList();
                            var usersToDisplay = usersInTeam.Take(_maxUserDisplayCount).ToList();
                            @foreach (var userToDisplay in usersToDisplay)
                            {
                                <MudText Class="mt-1" Style="text-wrap">@userToDisplay.FullName</MudText>
                            }
                            @if (context.UserIds.Count() > _maxUserDisplayCount)
                            {
                                <MudChip T="string" Size="Size.Small">+@((context.UserIds.Count() - _maxUserDisplayCount).ToString()) more</MudChip>
                            }
                            @if (context.Users.Any(u => !u.UserExists))
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Unknown Users</MudText>
                            }
                            @if (context.UserIds.GroupBy(u => u).Where(g => g.Count() > 1).Any())
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Duplicates</MudText>
                            }
                        }
                        else
                        {
                            <MudText>No users assigned</MudText>
                        }
                    </MudStack>
                </MudTd>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="false">
                <MudTd DataLabel="Users">
                    <MudChip T="string" Size="Size.Small">@((context.Users.Count())) user(s)</MudChip>
                </MudTd>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="false">
                <MudTd DataLabel="Super Users">
                    <MudStack Spacing="0" StretchItems="StretchItems.None">
                        @if (context.SuperUserIds != null && context.SuperUserIds.Any())
                        {
                            var superUsersToDisplay = _allUsers.Where(u => context.SuperUserIds.Contains(u.Id)).OrderBy(u => u.FullName).Take(_maxUserDisplayCount).ToList();
                            @foreach (var superUserToDisplay in superUsersToDisplay)
                            {
                                <MudText Class="mt-1">@superUserToDisplay.FullName</MudText>
                            }
                            @if (context.SuperUserIds.Count() > _maxUserDisplayCount)
                            {
                                <MudChip T="string" Size="Size.Small">+@((context.SuperUserIds.Count() - _maxUserDisplayCount).ToString()) more</MudChip>
                            }
                            @if (context.SuperUsers.Any(u => !u.UserExists))
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Unknown Super Users</MudText>
                            }
                            @if (context.SuperUserIds.GroupBy(u => u).Where(g => g.Count() > 1).Any())
                            {
                                <MudText Class="mt-1" Color="Color.Error">Contains Duplicates</MudText>
                            }
                        }
                        else
                        {
                            <MudText>No super users assigned</MudText>
                        }
                    </MudStack>
                </MudTd>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.LgAndUp" Invert="false">
                <MudTd DataLabel="Super Users">
                    <MudChip T="string" Size="Size.Small">@((context.SuperUsers.Count())) user(s)</MudChip>
                </MudTd>
            </MudHidden>
            <MudTd DataLabel="Workflow Configurations">
                workflow configurations goes here...
            </MudTd>
        </RowTemplate>
        <FooterContent>
            <MudTFootRow>
                <MudTd>
                    <MudTooltip Text="Add new team">
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       aria-label="add-team"
                                       Color="Color.Success"
                                       OnClick="async _ => await OpenTeamEditorDialogAsync()" />
                    </MudTooltip>
                </MudTd>
            </MudTFootRow>
        </FooterContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
        <EditButtonContent Context="button">
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
        </EditButtonContent>
    </MudTable>
}

@code {
    private bool _isInitialized = false;
    private bool _isLoading = true;
    private IEnumerable<Models.User> _allUsers = [];
    private IEnumerable<Models.WorkflowConfiguration> _allWorkflowConfigurations = [];
    private IEnumerable<Models.Team> _allTeams = [];
    private string _searchString = string.Empty;
    private int _maxUserDisplayCount = 5;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        await LoadUsersAsync();
        await LoadTeamsAsync();
        await LoadWorkflowConfigurationsAsync();
        _isLoading = false;
        _isInitialized = true;
    }

    private async Task LoadUsersAsync()
    {
        Logger.LogInformation("Loading users for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allUsers = await UserService.GetAsync(UserPreferences.MimerEnvironment);
    }

    private async Task LoadTeamsAsync()
    {
        Logger.LogInformation("Loading teams for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allTeams = await TeamService.GetAsync(UserPreferences.MimerEnvironment);

        foreach (var team in _allTeams)
        {
            team.Users.Clear();
            team.Users.AddRange(_allUsers.Where(u => team.UserIds.Contains(u.Id)).ToList());
            // Handle unknown users
            foreach (var userId in team.UserIds)
            {
                if (team.UserIds.Any(u => u == userId) && !team.Users.Any(u => u.Id == userId))
                {
                    team.Users.Add(new Models.User
                    {
                        Id = userId,
                        FullName = "Unknown User",
                        UserExists = false
                    });
                }
            }

            team.SuperUsers.Clear();
            team.SuperUsers.AddRange(_allUsers.Where(u => team.SuperUserIds.Contains(u.Id)).ToList());
            // Handle unknown super users
            foreach (var superUserId in team.SuperUserIds)
            {
                if (team.SuperUserIds.Any(u => u == superUserId) && !team.SuperUsers.Any(u => u.Id == superUserId))
                {
                    team.SuperUsers.Add(new Models.User
                    {
                        Id = superUserId,
                        FullName = "Unknown Super User",
                        UserExists = false
                    });
                }
            }
        }
    }

    private async Task LoadWorkflowConfigurationsAsync()
    {
        Logger.LogInformation("Loading workflow configurations for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allWorkflowConfigurations = await WorkflowConfigurationService.GetAsync(UserPreferences.MimerEnvironment);

        // Handle unknown workflow configurations
    }

    private bool FilterFunc(Models.Team team)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (team.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (team.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (team.UserIds.Any(i => i.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.Users.Any(u => u.FullName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.Users.Any(u => u.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.Users.Any(u => u.Initials?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUserIds.Any(i => i.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUsers.Any(u => u.FullName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUsers.Any(u => u.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUsers.Any(u => u.Initials?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;

        return false;
    }

    private async Task OpenTeamEditorDialogAsync(MudBlazor.TableRowClickEventArgs<Models.Team>? args = null)
    {
        var users = _allUsers;
        if (args?.Item?.Users.Any(u => u.UserExists == false) == true)
        {
            // If the team has unknown users, add them to the list to make it possible to unselect them
            users = _allUsers.Concat(args.Item.Users.Where(u => !u.UserExists)).ToList();
        }
        if (args?.Item?.SuperUsers.Any(u => u.UserExists == false) == true)
        {
            // If the team has unknown super users, add them to the list to make it possible to unselect them
            users = users.Concat(args.Item.SuperUsers.Where(u => !u.UserExists)).ToList();
        }

        var parameters = new DialogParameters<TeamEditorDialog>
        {
            { x => x.Users, users }
        };

        var isEditMode = args != null;
        if (isEditMode)
        {
            parameters.Add(x => x.IsEditMode, true);
            parameters.Add(x => x.Team, args!.Item);
        }

        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false };
        var dialog = await DialogService.ShowAsync<TeamEditorDialog>(null, parameters, options);
        var result = await dialog.Result;
    }
}