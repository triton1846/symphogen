@page "/teams"
@page "/teams/{TeamId}"
@rendermode InteractiveServer
@using FluentValidation.Results
@using System.Text.Json
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ILogger<Teams> Logger
@inject ISnackbar Snackbar
@inject ITeamService TeamService
@inject IUserPreferences UserPreferences
@inject IUserService UserService
@inject IWorkflowConfigurationService WorkflowConfigurationService
@inject NavigationManager NavigationManager
@attribute [Authorize]

<PageTitle>@_pageTitle</PageTitle>

@if (!UserPreferences.IsInitialized || _isLoading)
{
    <MudOverlay @bind-Visible="_isLoading" DarkBackground="true">
        <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
    </MudOverlay>
}
else
{
    <MudText Typo="Typo.h3">Teams</MudText>
    <MudTable AllowUnsorted="false"
              CustomFooter="true"
              Dense="true"
              Filter="new Func<Models.Team, bool>(FilterFunc)"
              Hover="true"
              Items="_allTeams"
              Loading="_isLoading"
              LoadingProgressColor="Color.Info"
              ReadOnly="_isLoading"
              SortLabel="Sort By"
              T="Team">
        <ToolBarContent>
            <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="false">
                <MudTooltip Text="Add new user" ShowOnFocus="false">
                    <MudIconButton aria-label="add-team"
                                   Color="Color.Success"
                                   Icon="@Icons.Material.Filled.Add"
                                   OnClick="async _ => await OpenTeamEditorDialogAsync()" />
                </MudTooltip>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.MdAndDown" Invert="false">
                <MudSpacer />
            </MudHidden>
            <MudTextField @bind-Value="_searchString"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Class="mt-0"
                          Clearable="true"
                          IconSize="Size.Medium"
                          Immediate="true"
                          Placeholder="Search"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTooltip Text="Add new team" ShowOnFocus="false">
                    <MudIconButton aria-label="add-team" Class="ml-n3"
                                   Color="Color.Success"
                                   Icon="@Icons.Material.Filled.Add"
                                   OnClick="async _ => await OpenTeamEditorDialogAsync()"
                                   Size="Size.Medium" />
                </MudTooltip>
            </MudTh>
            <MudTh>ID</MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.Team, object>(x => x.Name ?? string.Empty)">Team Name</MudTableSortLabel></MudTh>
            <MudTh>Users</MudTh>
            <MudTh>Super Users</MudTh>
            <MudTh>Workflow Configurations</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.ValidationResult?.IsValid == true)">Valid</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudTooltip Text="Edit team" ShowOnFocus="false">
                    <MudIconButton aria-label="edit-team"
                                   Color="Color.Success"
                                   Icon="@Icons.Material.Outlined.Edit"
                                   OnClick="async _ => await OpenTeamEditorDialogAsync(context)"
                                   Size="@Size.Small"
                                   Tag="context" />
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="ID">
                <IdCopyButton Id="@context.Id" TooltipText="@context.Id" />
            </MudTd>
            <MudTd DataLabel="Team Name">@context.Name</MudTd>
            <MudTd DataLabel="Users">
                <MudStack Spacing="0" StretchItems="StretchItems.None">
                    @if (context.UserIds.Any())
                    {
                        <MudChip CloseIcon="@(context.ShowUsers? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                                 Color="@(context.ShowUsers? Color.Info: Color.Default)"
                                 OnClose="_ => ShowUsers(context)"
                                 Size="Size.Small"
                                 T="string">@context.UserIds.Count() user(s)</MudChip>
                    }
                    else
                    {
                        <MudText>No users assigned</MudText>
                    }
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Super Users">
                <MudStack Spacing="0" StretchItems="StretchItems.None">
                    @if (context.SuperUserIds.Any())
                    {
                        <MudChip CloseIcon="@(context.ShowSuperUsers? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                                 Color="@(context.ShowSuperUsers? Color.Info: Color.Default)"
                                 OnClose="_ => ShowSuperUsers(context)"
                                 Size="Size.Small"
                                 T="string">@context.SuperUserIds.Count() super user(s)</MudChip>
                    }
                    else
                    {
                        <MudText>No super users assigned</MudText>
                    }
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Workflow Configurations">
                <MudStack Spacing="0" StretchItems="StretchItems.None">
                    @if (context.WorkflowConfigurationIds.Any())
                    {
                        <MudChip CloseIcon="@(context.ShowWorkflowConfigurations? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)"
                                 Color="@(context.ShowWorkflowConfigurations? Color.Info: Color.Default)"
                                 OnClose="_ => ShowWorkflowConfigurations(context)"
                                 Size="Size.Small"
                                 T="string">@context.WorkflowConfigurationIds.Count() workflow configuration(s)</MudChip>
                    }
                    else
                    {
                        <MudText>No workflow configurations assigned</MudText>
                    }
                </MudStack>
            </MudTd>
            <MudTd DataLabel="Valid">
                <MudTooltip Text="@(context.ValidationResult?.IsValid == false ? string.Join(" ", context.ValidationResult?.Errors ?? []) : "Team is valid")" ShowOnFocus="false">
                    <MudChip T="string" Color="@(context.ValidationResult?.IsValid == false ? Color.Error : Color.Success)" Size="Size.Small">
                        @(context.ValidationResult?.IsValid == false ? "Invalid" : "Valid")
                    </MudChip>
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowUsers)
            {
                <MudTr>
                    <MudTd colspan="7">
                        <MudTable Context="contextUser"
                                  Dense="true"
                                  Hover="true"
                                  Items="@context.Users"
                                  OnRowClick="row => NavigateToUser(row.Item?.Id ?? string.Empty)"
                                  T="User">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Users in @context.Name</MudText>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.User, object>(x => x.FullName ?? string.Empty)">Full Name</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.Email ?? string.Empty)">Email</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Full Name">@contextUser.FullName</MudTd>
                                <MudTd DataLabel="Email">@contextUser.Email</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudTable>
                    </MudTd>
                </MudTr>
            }
            @if (context.ShowSuperUsers)
            {
                <MudTr>
                    <MudTd colspan="7">
                        <MudTable Context="contextSuperUser"
                                  Dense="true"
                                  Hover="true"
                                  Items="@context.SuperUsers"
                                  OnRowClick="row => NavigateToUser(row.Item?.Id ?? string.Empty)"
                                  T="User">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Super Users in @context.Name</MudText>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.User, object>(x => x.FullName ?? string.Empty)">Full Name</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Models.User, object>(x => x.Email ?? string.Empty)">Email</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Full Name">@contextSuperUser.FullName</MudTd>
                                <MudTd DataLabel="Email">@contextSuperUser.Email</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudTable>
                    </MudTd>
                </MudTr>
            }
            @if (context.ShowWorkflowConfigurations)
            {
                <MudTr>
                    <MudTd colspan="7">
                        <MudTable Context="contextWorkflowConfiguration"
                                  Dense="true"
                                  Hover="true"
                                  Items="@context.WorkflowConfigurations"
                                  T="WorkflowConfiguration">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Workflow Configurations in @context.Name</MudText>
                            </ToolBarContent>
                            <HeaderContent>
                                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Models.WorkflowConfiguration, object>(x => x.Name ?? string.Empty)">Name</MudTableSortLabel></MudTh>
                                <MudTh><MudTableSortLabel SortBy="new Func<Models.WorkflowConfiguration, object>(x => x.Department ?? string.Empty)">Department</MudTableSortLabel></MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">@contextWorkflowConfiguration.Name</MudTd>
                                <MudTd DataLabel="Department">@contextWorkflowConfiguration.Department</MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager />
                            </PagerContent>
                        </MudTable>
                    </MudTd>
                </MudTr>
            }
        </ChildRowContent>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private bool _isLoading = true;
    private List<Models.User> _allUsers = [];
    private List<Models.WorkflowConfiguration> _allWorkflowConfigurations = [];
    private List<Models.Team> _allTeams = [];
    private string _searchString = string.Empty;
    private bool _canOpenEditor = true;
    private TeamValidator _teamValidator = new TeamValidator();
    private string _pageTitle = "Teams";

    [Parameter]
    public string? TeamId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Check if UserPreferences is initialized, can't initialize in OnInitializedAsync due to JavaScript interop not being available yet
        if (!UserPreferences.IsInitialized)
        {
            return;
        }

        await LoadDataAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!UserPreferences.IsInitialized)
        {
            await LoadDataAsync();
            StateHasChanged(); // Refresh the UI after initialization
        }

        var teamToEdit = _allTeams.FirstOrDefault(u => u.Id == TeamId);
        if (_canOpenEditor && teamToEdit != null)
        {
            await OpenTeamEditorDialogAsync(teamToEdit);
        }
    }

    private async Task LoadDataAsync()
    {
        _isLoading = true;
        await LoadUsersAsync();
        await LoadTeamsAsync();
        await LoadWorkflowConfigurationsAsync();

        // Validate all teams after loading
        foreach (var team in _allTeams)
        {
            ValidateTeam(team);
        }

        _isLoading = false;
    }

    private async Task LoadUsersAsync()
    {
        Logger.LogInformation("Loading users for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allUsers = [.. await UserService.GetAsync(UserPreferences.MimerEnvironment)];
    }

    private async Task LoadTeamsAsync()
    {
        Logger.LogInformation("Loading teams for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allTeams = [.. await TeamService.GetAsync(UserPreferences.MimerEnvironment)];

        foreach (var team in _allTeams)
        {
            team.Users.Clear();
            foreach (var userId in team.UserIds)
            {
                var user = _allUsers.FirstOrDefault(t => t.Id == userId);
                var unknownUser = new Models.User { Id = userId, FullName = "Unknown User", UserExists = false };
                team.Users.Add(user ?? unknownUser);
                if (!_allUsers.Any(t => t.Id == userId))
                {
                    _allUsers.Add(unknownUser);
                }
            }

            team.SuperUsers.Clear();
            foreach (var superUserId in team.SuperUserIds)
            {
                var superUser = _allUsers.FirstOrDefault(t => t.Id == superUserId);
                var unknownSuperUser = new Models.User { Id = superUserId, FullName = "Unknown Super User", UserExists = false };
                team.SuperUsers.Add(superUser ?? unknownSuperUser);
                if (!_allUsers.Any(t => t.Id == superUserId))
                {
                    _allUsers.Add(unknownSuperUser);
                }
            }
        }
    }

    private async Task LoadWorkflowConfigurationsAsync()
    {
        Logger.LogInformation("Loading workflow configurations for environment: {Environment}", UserPreferences.MimerEnvironment);
        _allWorkflowConfigurations = [.. await WorkflowConfigurationService.GetAsync(UserPreferences.MimerEnvironment)];
    }

    private bool FilterFunc(Models.Team team)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (team.Id.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (team.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;
        if (team.UserIds.Any(i => i.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.Users.Any(u => u.FullName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.Users.Any(u => u.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.Users.Any(u => u.Initials?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUserIds.Any(i => i.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUsers.Any(u => u.FullName?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUsers.Any(u => u.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;
        if (team.SuperUsers.Any(u => u.Initials?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true))
            return true;

        return false;
    }

    private async Task OpenTeamEditorDialogAsync(Team? teamToEdit = null)
    {
        if (!_canOpenEditor)
            return;

        _canOpenEditor = false; // Prevent multiple dialogs from opening

        try
        {
            var isEditMode = teamToEdit != null;
            _pageTitle = isEditMode ? $"Teams: {teamToEdit?.Name}" : "Add New Team";

            var parameters = new DialogParameters<TeamEditorDialog>
            {
                { x => x.AllUsers, _allUsers },
                { x => x.IsEditMode, isEditMode },
                { x => x.Team, teamToEdit }
            };

            var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, BackdropClick = false };
            var dialog = await DialogService.ShowAsync<TeamEditorDialog>(null, parameters, options);
            var result = await dialog.Result;

            if (result?.Canceled == false && result.Data is Models.Team team)
            {
                await HandleTeamUpdate(team, isEditMode);
            }
            else if (result?.Data is bool deleteTeam && deleteTeam && isEditMode && teamToEdit != null)
            {
                await HandleTeamDeletion(teamToEdit);
            }
            else if (result?.Canceled == true && teamToEdit != null)
            {
                Snackbar.Add($"Changes to team {teamToEdit.Name} were cancelled.", Severity.Info);
                Logger.LogInformation("Changes to team {Name} ({TeamId}) were cancelled", teamToEdit.Name, teamToEdit.Id);
            }
        }
        finally
        {
            TeamId = null; // Reset UserId to prevent reopening the editor on next render
            _canOpenEditor = true; // Allow opening editor again
            _pageTitle = "Teams"; // Reset page title after dialog closes
        }
    }

    private async Task HandleTeamUpdate(Models.Team team, bool isEditMode)
    {
        await TeamService.SaveAsync(UserPreferences.MimerEnvironment, team);
        ValidateTeam(team);

        if (isEditMode)
        {
            var index = _allTeams.FindIndex(u => u.Id == team.Id);
            if (index >= 0)
            {
                _allTeams[index] = team;
                _allTeams = _allTeams.OrderBy(u => u.Name ?? string.Empty).ToList();
                Snackbar.Add($"Team {team.Name} updated successfully!", Severity.Success);
                Logger.LogInformation("Updated team: {Name} ({TeamId})", team.Name, team.Id);
            }
            else
            {
                Snackbar.Add($"Team {team.Name} not found for update!", Severity.Error);
                Logger.LogWarning("Team {Name} ({TeamId}) not found for update", team.Name, team.Id);
                return;
            }
        }
        else
        {
            _allTeams.Add(team);
            _allTeams = _allTeams.OrderBy(u => u.Name ?? string.Empty).ToList();
            Snackbar.Add($"Team {team.Name} added successfully!", Severity.Success);
            Logger.LogInformation("Added new team: {Name} ({TeamId})", team.Name, team.Id);
        }
    }

    private async Task HandleTeamDeletion(Models.Team teamToDelete)
    {
        await TeamService.DeleteAsync(UserPreferences.MimerEnvironment, teamToDelete.Id);
        _allTeams.Remove(teamToDelete);
        Snackbar.Add($"Team {teamToDelete.Name} deleted successfully!", Severity.Success);
        Logger.LogInformation("Deleted team: {Name} ({TeamId})", teamToDelete.Name, teamToDelete.Id);
    }

    private void ShowUsers(Team team)
    {
        team.ShowUsers = !team.ShowUsers;
        team.ShowSuperUsers = false; // Hide super users when showing users
        team.ShowWorkflowConfigurations = false; // Hide workflow configurations when showing users
        _pageTitle = "Teams"; // Reset page title when showing teams
    }

    private void ShowSuperUsers(Team team)
    {
        team.ShowSuperUsers = !team.ShowSuperUsers;
        team.ShowUsers = false; // Hide users when showing super users
        team.ShowWorkflowConfigurations = false; // Hide workflow configurations when showing super users
        _pageTitle = "Teams"; // Reset page title when showing teams
    }

    private void ShowWorkflowConfigurations(Team team)
    {
        team.ShowWorkflowConfigurations = !team.ShowWorkflowConfigurations;
        team.ShowUsers = false; // Hide users when showing workflow configurations
        team.ShowSuperUsers = false; // Hide super users when showing workflow configurations
        _pageTitle = "Teams"; // Reset page title when showing teams
    }

    private void ValidateTeam(Models.Team team)
    {
        team.ValidationResult = _teamValidator.Validate(team);
    }

    private void NavigateToUser(string userId)
    {
        if (string.IsNullOrWhiteSpace(userId))
        {
            return;
        }

        _canOpenEditor = false; // Prevent opening editor while navigating
        NavigationManager.NavigateTo($"/users/{userId}");
    }
}