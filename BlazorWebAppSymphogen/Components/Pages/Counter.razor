@page "/counter"
@rendermode InteractiveServer
@attribute [Authorize("RequireDomain")]
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<MudGrid>
    <MudItem xs="12">
        <MudChip T="string" Color="@_chipColor" Size="Size.Large">@currentCount</MudChip>
    </MudItem>
    <MudItem xs="12">
        <MudFab Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Add"
                Size="Size.Small"
                @onmousedown="StartIncrement"
                @onmouseup="StopIncrement"
                @onmouseleave="StopIncrement"
                @ontouchstart="StartIncrement"
                @ontouchend="StopIncrement"
                @ontouchcancel="StopIncrement" />

        <MudFab Color="Color.Primary"
                StartIcon="@Icons.Material.Filled.Remove"
                Size="Size.Small"
                @onmousedown="StartDecrement"
                @onmouseup="StopDecrement"
                @onmouseleave="StopDecrement"
                @ontouchstart="StartDecrement"
                @ontouchend="StopDecrement"
                @ontouchcancel="StopDecrement" />
    </MudItem>
</MudGrid>

@code {
    private int currentCount = 0;
    private Color _chipColor = Color.Default;
    private System.Threading.Timer? timer;
    private const int interval = 100; // milliseconds between increments when holding

    private void StartIncrement()
    {
        timer?.Dispose();
        timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                IncrementCount();
                StateHasChanged();
            });
        }, null, 0, interval);
    }

    private void StopIncrement()
    {
        timer?.Dispose();
        timer = null;
    }

    private void StartDecrement()
    {
        timer?.Dispose();
        timer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                DecrementCount();
                StateHasChanged();
            });
        }, null, 0, interval);
    }

    private void StopDecrement()
    {
        timer?.Dispose();
        timer = null;
    }

    private void IncrementCount()
    {
        currentCount++;
        UpdateChipColor();
    }

    private void DecrementCount()
    {
        currentCount--;
        UpdateChipColor();
    }

    private void UpdateChipColor()
    {
        _chipColor = currentCount switch
        {
            var x when x < 0 => Color.Error,
            0 => Color.Default,
            var x when x < 10 => Color.Warning,
            _ => Color.Success
        };
    }

    public ValueTask DisposeAsync()
    {
        timer?.Dispose();
        return ValueTask.CompletedTask;
    }
}
